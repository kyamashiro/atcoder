#!/usr/bin/env python3
# from typing import *


# def solve(N: int, S: List[str], P: List[int]) -> List[str]:
import copy


def solve(N, SP):
    sorted_dict = sorted(SP.items(), key=lambda x: x[1], reverse=True)
    origin = copy.deepcopy(SP)

    for k, v in sorted_dict:
        v.sort(reverse=True)

    ans = []
    for k, arr in sorted_dict:
        for v in arr:
            ans.append(f"{k}:{v}")

    for k, arr in list(origin.items()):
        for v in arr:
            print(ans.index((f"{k}:{v}")) + 1)


# for v in arr:
#     print(ans.index(f"{k}:{v}"))


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    SP = {}
    for i in range(N):
        city = next(tokens)
        score = int(next(tokens))
        SP.setdefault(city, []).append(score)
    assert next(tokens, None) is None
    ans = solve(N, SP)


if __name__ == '__main__':
    main()
